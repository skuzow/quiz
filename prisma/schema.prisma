// https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "omitApi"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  username         String?  @unique
  name             String
  image            String?
  emailVerified    Boolean  @default(false)
  twoFactorEnabled Boolean?

  accounts   Account[]
  sessions   Session[]
  twoFactors TwoFactor[]
  roles      UserToRole[]
  tests      UserTest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  ipAddress String?
  userAgent String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("session")
}

model Account {
  id           String    @id @default(cuid())
  accountId    String
  providerId   String
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?

  @@map("verification")
}

model Jwks {
  id         String @id @default(cuid())
  publicKey  String
  privateKey String

  createdAt DateTime @default(now())

  @@map("jwks")
}

model TwoFactor {
  id          String @id @default(cuid())
  secret      String
  backupCodes String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("twoFactor")
}

model Role {
  id   String @id @default(cuid())
  name String @unique

  users UserToRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserToRole {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@unique([userId, roleId])
}

model UserTest {
  id          String  @id @default(cuid())
  title       String
  description String
  image       String?
  published   Boolean @default(false)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  categories UserTestToTestCategory[]
  questions  UserTestQuestion[]
  views      UserTestView[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TestCategory {
  id   String @id @default(cuid())
  name String @unique

  tests UserTestToTestCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserTestToTestCategory {
  id String @id @default(cuid())

  test   UserTest @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId String

  category   TestCategory @relation(fields: [categoryId], references: [id])
  categoryId String

  @@unique([testId, categoryId])
}

model UserTestQuestion {
  id     String  @id @default(cuid())
  number Int
  text   String
  image  String?

  type   TestQuestionType @relation(fields: [typeId], references: [id])
  typeId String

  test   UserTest @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId String

  options UserTestQuestionOption[]
}

model UserTestQuestionOption {
  id        String  @id @default(cuid())
  text      String
  isCorrect Boolean

  question   UserTestQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
}

model TestQuestionType {
  id   String @id @default(cuid())
  name String @unique

  questions UserTestQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserTestView {
  id String @id @default(cuid())

  test   UserTest @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId String

  viewedAt DateTime @default(now())
}
